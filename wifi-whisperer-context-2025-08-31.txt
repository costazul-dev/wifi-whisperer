=== ./config/wifi-monitor.service ===
[Unit]
Description=Wi-Fi Whisperer Capture Service
After=network.target

[Service]
ExecStart=/bin/sh -c "/usr/sbin/airodump-ng wlan1 --duration 300 --write /var/spool/wifi-monitor/data/capture_`date +%%Y-%%m-%%d_%%H-%%M-%%S` --output-format csv"

[Install]
WantedBy=multi-user.target


=== ./config/wifi-monitor.timer ===
[Unit]
Description=Run wifi-monitor.service every 5 minutes on the minute

[Timer]
OnCalendar=*:0/5
Unit=wifi-monitor.service
Persistent=true

[Install]
WantedBy=timers.target



=== ./LICENSE ===
MIT License

Copyright (c) 2025 Esteban Samayoa Mayora

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



=== ./src/parser.py ===
import csv
import sys
from typing import Set

def parse_probes(file_path: str) -> Set[str]:
    """
    Parses an airodump-ng CSV file to extract unique, probed SSIDs.

    Args:
        file_path: The path to the CSV capture file.

    Returns:
        A set of unique SSID strings found in the file.
    """
    probed_ssids = set()
    
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
        # Skip to the client data section of the file
        for line in f:
            if line.strip().startswith('Station MAC'):
                break
        
        # We are now at the beginning of the client data
        # The first column is 'Station MAC', the last is ' Probed ESSIDs'
        # Note the leading space in the Probed ESSIDs header
        reader = csv.DictReader(f)
        for row in reader:
            # The key might have leading/trailing whitespace
            ssid_list = row.get(' Probed ESSIDs', '').strip()
            if ssid_list:
                # A device can probe for multiple SSIDs, comma-separated
                for ssid in ssid_list.split(','):
                    ssid = ssid.strip()
                    if ssid:
                        probed_ssids.add(ssid)

    return probed_ssids

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: python {sys.argv[0]} <path_to_capture_file.csv>")
        sys.exit(1)

    capture_file = sys.argv[1]
    unique_ssids = parse_probes(capture_file)
    
    if unique_ssids:
        print("Found Unique Probed SSIDs:")
        for ssid in sorted(list(unique_ssids)):
            print(f"- {ssid}")
    else:
        print("No probed SSIDs found in the capture file.")


=== ./README.md ===
# Wi-Fi Whisperer

A poetic surveillance system that listens for the digital ghosts of nearby Wi-Fi networks and uses an AI to find the most interesting among them.

## Core Idea

Wi-Fi Whisperer is a passive listening device built on a Raspberry Pi. It captures Wi-Fi "probe requests"—the little digital cries from phones searching for networks they remember. These remembered network names (SSIDs) are collected, parsed, and fed into a GPT model that ranks them daily based on humor, weirdness, and emotional undertones. It's a joke machine and a quiet eavesdropper on collective memory.

## Repository Structure

```
wifi-whisperer/
├── config/          # Service definitions for automation
├── scripts/         # Helper shell scripts for setup
└── src/             # Python source code for parsing and analysis
```

## How It Works

The project operates as a simple, automated data pipeline:

1. **Capture**: A systemd service runs airodump-ng 24/7 in the background, sniffing for Wi-Fi traffic and saving all captured data to CSV log files.
2. **Parse**: A Python script reads the raw CSV files, isolating and extracting only the unique "probed SSIDs" from client devices.
3. **Analyze (In Development)**: The collected SSIDs are sent to a GPT model to be ranked, categorized, and commented on.
4. **Publish (In Development)**: The AI's analysis is formatted into a daily Markdown digest.

## Setup Instructions

This guide details the one-time setup required to turn a Raspberry Pi into a dedicated Wi-Fi Whisperer device.

### 1. Hardware Prerequisites

- A Raspberry Pi (tested on a Pi 4B with Raspberry Pi OS Bookworm).
- The Pi's internal Wi-Fi (wlan0) for your primary SSH/internet connection.
- A separate USB Wi-Fi adapter that supports monitor mode (this will become wlan1).

### 2. Environment Setup

First, clone the repository, set up a Python virtual environment, and install the necessary dependencies.

```bash
# Clone the repository
git clone https://github.com/your-username/wifi-whisperer.git
cd wifi-whisperer

# Create and activate a virtual environment
python3 -m venv .venv
source .venv/bin/activate

# Install system and Python packages
sudo apt update && sudo apt install -y aircrack-ng
pip install -r requirements.txt
```

### 3. Isolate the Sniffing Adapter (One-Time Setup)

To ensure the capture process doesn't interfere with your Pi's connectivity, you must tell the system's NetworkManager to ignore your USB adapter.

First, find your adapter's MAC address:

```bash
# It will be the 'ether' address for wlan1
ip a
```

Then, add it to the unmanaged-devices list. Replace the MAC address in the command below with the one you just found.

```bash
echo -e "[keyfile]\nunmanaged-devices=mac:cc:64:1a:ee:93:1b" | sudo tee /etc/NetworkManager/conf.d/99-unmanaged-devices.conf
```

### 4. Install and Enable the Capture Service

Finally, copy the service and timer files into place. This will configure the Pi to run a 5-minute capture every 5 minutes.

```bash
# Copy the service and timer files to the systemd directory
sudo cp config/wifi-monitor.service /etc/systemd/system/
sudo cp config/wifi-monitor.timer /etc/systemd/system/

# Reload systemd, then enable and start the timer
sudo systemctl daemon-reload
sudo systemctl enable --now wifi-monitor.timer
```

Your Pi is now configured for automated sniffing. You can check the status of the scheduled captures with `sudo systemctl list-timers`. Raw data is saved to `/var/spool/wifi-monitor/data/`.

## Usage

Once the service is running, your main interaction with the project will be processing the data it collects.

### Check Service Status

You can check the logs of the last capture run at any time:
```bash
sudo journalctl -u wifi-monitor.service -n 20 --no-pager
```

### Parse Captured Data

Use the parser.py script to read a raw CSV capture file and print a clean list of the unique probed SSIDs found within it.

```bash
# Activate your virtual environment first if you haven't already
source .venv/bin/activate

# Run the parser on one of the capture files
python3 src/parser.py /var/spool/wifi-monitor/data/capture-01.csv
```

This command will output a simple list, which will serve as the input for the AI analysis in the next phase.

## Roadmap: Next Steps

The data collection foundation is complete. The next phase focuses on bringing the "personality" to the project.

- [ ] **Develop Orchestration Script**: Create a main Python script that automates the daily workflow:
  - Find all new capture files from the last 24 hours.
  - Run the parser on them to collect a single list of unique SSIDs.
  - Apply filters to remove common/uninteresting names (e.g., "XFINITY", "Starbucks WiFi").

- [ ] **Integrate AI Analysis**: Feed the filtered list of SSIDs to the OpenAI API with a carefully crafted prompt to get ranked results and commentary.

- [ ] **Generate Daily Digest**: Format the AI's response into a clean, timestamped Markdown file (e.g., digest-2025-09-01.md).

## License

This project is licensed under the MIT License - see the LICENSE file for details.


=== ./scripts/start-monitor-mode.sh ===
#!/bin/bash
#
# Puts the wlan1 interface into monitor mode.
#

echo "Putting wlan1 into monitor mode..."
sudo ip link set wlan1 down
sudo iw wlan1 set monitor
sudo ip link set wlan1 up

echo "Done. Verifying mode:"
iwconfig wlan1


